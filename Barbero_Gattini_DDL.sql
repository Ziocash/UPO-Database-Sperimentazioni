-- Paziente
CREATE TABLE public.paziente
(
    codicefiscale character varying(25) COLLATE pg_catalog."default" NOT NULL,
    nome character varying(100) COLLATE pg_catalog."default" NOT NULL,
    cognome character varying(100) COLLATE pg_catalog."default" NOT NULL,
    statocivile character varying(50) COLLATE pg_catalog."default",
    impiego character varying(50) COLLATE pg_catalog."default",
    datanascita date NOT NULL,
    CONSTRAINT paziente_pkey PRIMARY KEY (codicefiscale)
)

TABLESPACE pg_default;

ALTER TABLE public.paziente
    OWNER to postgres;

-- Medico

CREATE TABLE public.medico
(
    codicefiscale character varying(25) COLLATE pg_catalog."default" NOT NULL,
    nome character varying(100) COLLATE pg_catalog."default" NOT NULL,
    cognome character varying(100) COLLATE pg_catalog."default" NOT NULL,
    email character varying(150) COLLATE pg_catalog."default" NOT NULL,
    datanascita date NOT NULL,
    dataabilitazione date,
    abilitato boolean NOT NULL,
    specializzazione character varying(100) COLLATE pg_catalog."default",
    CONSTRAINT medico_pkey PRIMARY KEY (codicefiscale),
    CONSTRAINT check_date CHECK (
CASE
    WHEN (date_part('year'::text, CURRENT_DATE) - date_part('year'::text, dataabilitazione)) >= 3::double precision THEN abilitato = true
    ELSE abilitato = false
END)
)

TABLESPACE pg_default;

ALTER TABLE public.medico
    OWNER to postgres;

-- Ricovero

CREATE TABLE public.ricovero
(
    datainizio date NOT NULL,
    datafine date,
    drg numeric NOT NULL,
    tipo character varying(50) COLLATE pg_catalog."default",
    cfpaziente character varying(25) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT ricovero_pkey PRIMARY KEY (datainizio, cfpaziente),
    CONSTRAINT ricovero_cfpaziente_fkey FOREIGN KEY (cfpaziente)
        REFERENCES public.paziente (codicefiscale) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE public.ricovero
    OWNER to postgres;

-- Patologia

CREATE TABLE public.patologia
(
    nome character varying(150) COLLATE pg_catalog."default" NOT NULL,
    attuale boolean NOT NULL,
    tipo character varying(50) COLLATE pg_catalog."default" NOT NULL,
    descrizione character varying(2000) COLLATE pg_catalog."default",
    cfpaziente character varying(25) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT patologia_pkey PRIMARY KEY (nome, cfpaziente),
    CONSTRAINT patologia_cfpaziente_fkey FOREIGN KEY (cfpaziente)
        REFERENCES public.paziente (codicefiscale) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE public.patologia
    OWNER to postgres;

-- Visita

CREATE TABLE public.visita
(
    id_visita bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    risultati_eco character varying(450) COLLATE pg_catalog."default",
    farmaci character varying(200) COLLATE pg_catalog."default",
    peso numeric NOT NULL,
    pressione_diastolica integer NOT NULL,
    pressione_sistolica integer NOT NULL,
    dolori_addominali boolean NOT NULL,
    cfpaziente character varying(25) COLLATE pg_catalog."default" NOT NULL,
    cfmedico character varying(25) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT visita_pkey PRIMARY KEY (id_visita),
    CONSTRAINT visita_cfmedico_fkey FOREIGN KEY (cfmedico)
        REFERENCES public.medico (codicefiscale) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT visita_cfpaziente_fkey FOREIGN KEY (cfpaziente)
        REFERENCES public.paziente (codicefiscale) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE public.visita
    OWNER to postgres;

-- Intervento

CREATE TABLE public.intervento
(
    id_intervento bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    tipo character varying(50) COLLATE pg_catalog."default" NOT NULL,
    complicazioni character varying(200) COLLATE pg_catalog."default",
    cfpaziente character varying(25) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT intervento_pkey PRIMARY KEY (id_intervento),
    CONSTRAINT intervento_cfpaziente_fkey FOREIGN KEY (cfpaziente)
        REFERENCES public.paziente (codicefiscale) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE public.intervento
    OWNER to postgres;

-- Compiere

CREATE TABLE public.compiere
(
    id_intervento bigint NOT NULL,
    cfmedico character varying(25) COLLATE pg_catalog."default" NOT NULL,
    primo boolean NOT NULL,
    CONSTRAINT compiere_pkey PRIMARY KEY (id_intervento, cfmedico),
    CONSTRAINT compiere_cfmedico_fkey FOREIGN KEY (cfmedico)
        REFERENCES public.medico (codicefiscale) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT compiere_id_intervento_fkey FOREIGN KEY (id_intervento)
        REFERENCES public.intervento (id_intervento) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE public.compiere
    OWNER to postgres;

-- Ecografia

CREATE TABLE public.ecografia
(
    id_eco bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    numerocalcoli integer NOT NULL,
    dimensioni numeric,
    posizione character varying(150) COLLATE pg_catalog."default",
    forma character varying(150) COLLATE pg_catalog."default",
    id_visita bigint NOT NULL,
    CONSTRAINT ecografia_pkey PRIMARY KEY (id_eco),
    CONSTRAINT ecografia_id_visita_fkey FOREIGN KEY (id_visita)
        REFERENCES public.visita (id_visita) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE public.ecografia
    OWNER to postgres;

-- Inserimento dati risultati_eco <- ecografia
-- Query di tipo batch che viene eseguita ad ogni creazione di ecografia 

UPDATE public.visita
	SET risultati_eco = (SELECT concat(numerocalcoli, ' ', dimensioni, ' ', posizione, ' ', forma) AS risultati FROM ecografia JOIN visita ON visita.id_visita = ecografia.id_visita WHERE ecografia.id_visita = 1 )
	WHERE visita.id_visita = 1